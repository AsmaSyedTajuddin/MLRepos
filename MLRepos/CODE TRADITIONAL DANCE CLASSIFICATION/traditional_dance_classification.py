# -*- coding: utf-8 -*-
"""Traditional Dance Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19X8Cxfwgb4RH3Cw6FGU7Sl4MB1M_PWLO

# Data Entry
"""

import pandas as pd
train_df = pd.read_csv('Traditional-Dance-Classification/dataset/train.csv')
test_df = pd.read_csv('Traditional-Dance-Classification/dataset/test.csv')

"""# Data Preprocessing"""

print(train_df.head())

print(test_df.head())

from google.colab.patches import cv2_imshow
import cv2
img = cv2.imread('Traditional-Dance-Classification/dataset/train/' + str(train_df['Image'][4]))
cv2_imshow(img)
img.shape

train_df['target'].value_counts()

"""# Spliting Train and Test Data"""

from sklearn.model_selection import train_test_split
train, validate = train_test_split(train_df, test_size = 0.25, random_state = 1)

train['target'].value_counts()

validate['target'].value_counts()

"""# Importing Required Libraries to build model"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout
from tensorflow.keras.layers import Dense,Flatten
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras import activations
from tensorflow.keras import layers
import numpy as np

"""# Creating the model"""

classifier = Sequential()

classifier.add(Conv2D(32, (3,3), input_shape = (128,128,3), activation = 'relu'))
#classifier.add(BatchNormalization())
#classifier.add(layers.Activation('relu'))
classifier.add(MaxPooling2D(pool_size = (2,2)))
#classifier.add(Dropout(0.5))

classifier.add(Conv2D(64, (3,3), activation = 'relu'))
#classifier.add(BatchNormalization())
#classifier.add(layers.Activation('relu'))
classifier.add(MaxPooling2D(pool_size = (2,2)))
classifier.add(Dropout(0.5))

classifier.add(Conv2D(128, (3,3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2,2)))
classifier.add(Dropout(0.5))

classifier.add(Flatten())
classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dropout(0.5))
classifier.add(Dense(units = 8, activation = 'softmax'))

classifier.compile(loss = 'categorical_crossentropy', 
                   optimizer='adam',
                   metrics = ['accuracy'])

classifier.summary()

"""# What id Image Data Generator ?
Image data augmentation is typically only applied to the training dataset, and not to the validation or test dataset. This is different from data preparation such as image resizing and pixel scaling; they must be performed consistently across all datasets that interact with the model
"""

from keras.preprocessing.image import ImageDataGenerator

train_image_data = ImageDataGenerator(rescale = 1./255,
                                      shear_range = 0.2,
                                      zoom_range = 0.2,
                                      horizontal_flip = True,
                                      vertical_flip = True)
val_image_data = ImageDataGenerator(rescale = 1./255)

train_generator = train_image_data.flow_from_dataframe(dataframe = train,
                                                       directory = 'Traditional-Dance-Classification/dataset/train',
                                                       x_col = 'Image',
                                                       y_col = 'target',
                                                       batch_size = 32,
                                                       class_mode = 'categorical',
                                                       shuffle = True,
                                                       target_size = (128,128))

test_generator = val_image_data.flow_from_dataframe(dataframe = validate,
                                                    directory = 'Traditional-Dance-Classification/dataset/train',
                                                    x_col = 'Image',
                                                    y_col = 'target',
                                                    batch_size = 32,
                                                    class_mode = 'categorical',
                                                    shuffle = True,
                                                    target_size = (128,128))

"""# Training The model"""

trained_model = classifier.fit(train_generator,
                               validation_data = test_generator,
                               epochs = 100)

"""# Saving the weights"""

classifier.evaluate_generator(generator=test_generator)
classifier.save('trained_model.h5')

"""# plotting the accuracy graph"""

# Plot training and validation loss/accuracy
import matplotlib.pyplot as plt
print(trained_model.history.keys())
# Loss
plt.plot(trained_model.history['loss'])
plt.plot(trained_model.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['loss', 'val_loss'], loc='upper left')
plt.show()



